Imports System.xml
Imports System.IO
Imports Amcom.SDC.BaseServices
Public Class GrammerXml

    Private mItems As List(Of GrammarItem)
    Private mPreList As List(Of String)
    Private mPostList As List(Of String)
    Private mFileName As String

    Public Sub New(ByVal grammarFile As String, ByVal prelist As List(Of String), ByVal postList As List(Of String))
        mFileName = grammarFile
        mPreList = prelist
        mPostList = postList
    End Sub
    Public Sub AddItem(ByVal item As GrammarItem)
        If mItems Is Nothing Then mItems = New List(Of GrammarItem)
        mItems.Add(item)
    End Sub
    Private Sub Initialize()
        mItems = New List(Of GrammarItem)
    End Sub
    Public Function WriteGrammarFile() As Boolean
        Dim sb As New Text.StringBuilder
        sb.Append("<?xml version=""1.0"" encoding=""UTF-8""?>")
        sb.Append(vbCrLf)
        sb.Append("<!--Grammar for SPWX XML-->")
        sb.Append(vbCrLf)
        sb.Append("<!--Auto-generated by SDC IntelliSPEECH Service-->")
        sb.Append(vbCrLf)        
        'sb.Append("<!--" & App.FileShortDateStamp & "-->")
        sb.Append(vbCrLf)
        sb.Append("<grammar xmlns=""http://www.w3.org/2001/06/grammar"" xml:lang=""en-US"" version=""1.0"" root=""ROOT"">")
        sb.Append(vbCrLf)
        sb.Append("<rule id=""ROOT"" scope=""public"">")
        sb.Append(vbCrLf)
        sb.Append("<ruleref uri=""#pre""/>")
        sb.Append(vbCrLf)
        sb.Append("<ruleref uri=""#names"" tag=""id=names.id;altname=names.altname;grammar_name=names.grammar_name""/>")
        sb.Append(vbCrLf)
        sb.Append("<ruleref uri=""#post""/>")
        sb.Append(vbCrLf)
        sb.Append("</rule>")
        sb.Append(vbCrLf)
        sb.Append("<rule id=""pre"">")
        sb.Append(vbCrLf)
        sb.Append("<count number=""0+"">")
        sb.Append(vbCrLf)
        sb.Append("<one-of>")
        sb.Append(vbCrLf)
        For Each item As String In mPreList
            sb.Append("<item>")
            sb.Append(item)
            sb.Append("</item>")
            sb.Append(vbCrLf)
        Next
        sb.Append("</one-of>")
        sb.Append(vbCrLf)
        sb.Append("</count>")
        sb.Append(vbCrLf)
        sb.Append("</rule>")
        sb.Append(vbCrLf)
        sb.Append("<rule id=""names"" scope=""public"">")
        sb.Append(vbCrLf)
        sb.Append("<one-of>")
        sb.Append(vbCrLf)
        For Each grammarItem As GrammarItem In mItems
            sb.Append(grammarItem.ToString)
            sb.Append(vbCrLf)
        Next
        sb.Append("</one-of>")
        sb.Append(vbCrLf)
        sb.Append("</rule>")
        sb.Append(vbCrLf)
        sb.Append("<rule id=""post"">")
        sb.Append(vbCrLf)
        sb.Append("<count number=""0+"">")
        sb.Append(vbCrLf)
        sb.Append("<one-of>")
        sb.Append(vbCrLf)
        For Each item As String In mPostList
            sb.Append("<item>")
            sb.Append(item)
            sb.Append("</item>")
            sb.Append(vbCrLf)
        Next
        sb.Append("</one-of>")
        sb.Append(vbCrLf)
        sb.Append("</count>")
        sb.Append(vbCrLf)
        sb.Append("</rule>")
        sb.Append(vbCrLf)
        sb.Append("</grammar>")
        sb.Append(vbCrLf)
        Try
            My.Computer.FileSystem.WriteAllText(mFileName.Replace("/", "\"), sb.ToString, False)
        Catch ex As Exception
            App.TraceLog(TraceLevel.Error, "Failed to write grammar file: " & ex.Message)
            App.ExceptionLog(New AmcomException("Failed to write grammar file", ex))
            Return False
        End Try
        Return True
    End Function
End Class






