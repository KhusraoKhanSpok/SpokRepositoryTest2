'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
'
Namespace OutboundDialerService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="OutboundDialerPortBinding", [Namespace]:="http://server.outdial.smm.sandcherry.com/")>  _
    Partial Public Class OutboundDialerService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private addOutboundCallOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelPendingOutboundCallOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDefaultRetryIntervalMinutesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelRetryOutboundCallOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDefaultBrowserURIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addOutboundCallWithRetryIntervalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addOutboundCallWithPriorityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private changePriorityByForeignKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addOutboundCallWithForeignKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelOutboundCallByForeignKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getOutboundCallListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private testerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Amcom.SDC.IntelliSpeech.Library.My.MySettings.Default.SDCSolutions_IntelliSpeech_Library_OutboundDialerService_OutboundDialerService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event addOutboundCallCompleted As addOutboundCallCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelPendingOutboundCallCompleted As cancelPendingOutboundCallCompletedEventHandler
        
        '''<remarks/>
        Public Event getDefaultRetryIntervalMinutesCompleted As getDefaultRetryIntervalMinutesCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelRetryOutboundCallCompleted As cancelRetryOutboundCallCompletedEventHandler
        
        '''<remarks/>
        Public Event getDefaultBrowserURICompleted As getDefaultBrowserURICompletedEventHandler
        
        '''<remarks/>
        Public Event addOutboundCallWithRetryIntervalCompleted As addOutboundCallWithRetryIntervalCompletedEventHandler
        
        '''<remarks/>
        Public Event addOutboundCallWithPriorityCompleted As addOutboundCallWithPriorityCompletedEventHandler
        
        '''<remarks/>
        Public Event changePriorityByForeignKeyCompleted As changePriorityByForeignKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event addOutboundCallWithForeignKeyCompleted As addOutboundCallWithForeignKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelOutboundCallByForeignKeyCompleted As cancelOutboundCallByForeignKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event getOutboundCallListCompleted As getOutboundCallListCompletedEventHandler
        
        '''<remarks/>
        Public Event testerCompleted As testerCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addOutboundCall(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg1 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg2 As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Long
            Dim results() As Object = Me.Invoke("addOutboundCall", New Object() {arg0, arg1, arg2})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addOutboundCallAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String)
            Me.addOutboundCallAsync(arg0, arg1, arg2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addOutboundCallAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal userState As Object)
            If (Me.addOutboundCallOperationCompleted Is Nothing) Then
                Me.addOutboundCallOperationCompleted = AddressOf Me.OnaddOutboundCallOperationCompleted
            End If
            Me.InvokeAsync("addOutboundCall", New Object() {arg0, arg1, arg2}, Me.addOutboundCallOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddOutboundCallOperationCompleted(ByVal arg As Object)
            If (Not (Me.addOutboundCallCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addOutboundCallCompleted(Me, New addOutboundCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub cancelPendingOutboundCall(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As Long)
            Me.Invoke("cancelPendingOutboundCall", New Object() {arg0})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelPendingOutboundCallAsync(ByVal arg0 As Long)
            Me.cancelPendingOutboundCallAsync(arg0, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelPendingOutboundCallAsync(ByVal arg0 As Long, ByVal userState As Object)
            If (Me.cancelPendingOutboundCallOperationCompleted Is Nothing) Then
                Me.cancelPendingOutboundCallOperationCompleted = AddressOf Me.OncancelPendingOutboundCallOperationCompleted
            End If
            Me.InvokeAsync("cancelPendingOutboundCall", New Object() {arg0}, Me.cancelPendingOutboundCallOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelPendingOutboundCallOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelPendingOutboundCallCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelPendingOutboundCallCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getDefaultRetryIntervalMinutes() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("getDefaultRetryIntervalMinutes", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getDefaultRetryIntervalMinutesAsync()
            Me.getDefaultRetryIntervalMinutesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getDefaultRetryIntervalMinutesAsync(ByVal userState As Object)
            If (Me.getDefaultRetryIntervalMinutesOperationCompleted Is Nothing) Then
                Me.getDefaultRetryIntervalMinutesOperationCompleted = AddressOf Me.OngetDefaultRetryIntervalMinutesOperationCompleted
            End If
            Me.InvokeAsync("getDefaultRetryIntervalMinutes", New Object(-1) {}, Me.getDefaultRetryIntervalMinutesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDefaultRetryIntervalMinutesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getDefaultRetryIntervalMinutesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDefaultRetryIntervalMinutesCompleted(Me, New getDefaultRetryIntervalMinutesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub cancelRetryOutboundCall(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As Long)
            Me.Invoke("cancelRetryOutboundCall", New Object() {arg0})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelRetryOutboundCallAsync(ByVal arg0 As Long)
            Me.cancelRetryOutboundCallAsync(arg0, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelRetryOutboundCallAsync(ByVal arg0 As Long, ByVal userState As Object)
            If (Me.cancelRetryOutboundCallOperationCompleted Is Nothing) Then
                Me.cancelRetryOutboundCallOperationCompleted = AddressOf Me.OncancelRetryOutboundCallOperationCompleted
            End If
            Me.InvokeAsync("cancelRetryOutboundCall", New Object() {arg0}, Me.cancelRetryOutboundCallOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelRetryOutboundCallOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelRetryOutboundCallCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelRetryOutboundCallCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getDefaultBrowserURI() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("getDefaultBrowserURI", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getDefaultBrowserURIAsync()
            Me.getDefaultBrowserURIAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getDefaultBrowserURIAsync(ByVal userState As Object)
            If (Me.getDefaultBrowserURIOperationCompleted Is Nothing) Then
                Me.getDefaultBrowserURIOperationCompleted = AddressOf Me.OngetDefaultBrowserURIOperationCompleted
            End If
            Me.InvokeAsync("getDefaultBrowserURI", New Object(-1) {}, Me.getDefaultBrowserURIOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDefaultBrowserURIOperationCompleted(ByVal arg As Object)
            If (Not (Me.getDefaultBrowserURICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDefaultBrowserURICompleted(Me, New getDefaultBrowserURICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addOutboundCallWithRetryInterval(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg1 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg2 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg3 As Integer) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Long
            Dim results() As Object = Me.Invoke("addOutboundCallWithRetryInterval", New Object() {arg0, arg1, arg2, arg3})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addOutboundCallWithRetryIntervalAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As Integer)
            Me.addOutboundCallWithRetryIntervalAsync(arg0, arg1, arg2, arg3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addOutboundCallWithRetryIntervalAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As Integer, ByVal userState As Object)
            If (Me.addOutboundCallWithRetryIntervalOperationCompleted Is Nothing) Then
                Me.addOutboundCallWithRetryIntervalOperationCompleted = AddressOf Me.OnaddOutboundCallWithRetryIntervalOperationCompleted
            End If
            Me.InvokeAsync("addOutboundCallWithRetryInterval", New Object() {arg0, arg1, arg2, arg3}, Me.addOutboundCallWithRetryIntervalOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddOutboundCallWithRetryIntervalOperationCompleted(ByVal arg As Object)
            If (Not (Me.addOutboundCallWithRetryIntervalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addOutboundCallWithRetryIntervalCompleted(Me, New addOutboundCallWithRetryIntervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addOutboundCallWithPriority(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg1 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg2 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg3 As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg4 As Integer) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Long
            Dim results() As Object = Me.Invoke("addOutboundCallWithPriority", New Object() {arg0, arg1, arg2, arg3, arg4})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addOutboundCallWithPriorityAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As Integer, ByVal arg4 As Integer)
            Me.addOutboundCallWithPriorityAsync(arg0, arg1, arg2, arg3, arg4, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addOutboundCallWithPriorityAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As Integer, ByVal arg4 As Integer, ByVal userState As Object)
            If (Me.addOutboundCallWithPriorityOperationCompleted Is Nothing) Then
                Me.addOutboundCallWithPriorityOperationCompleted = AddressOf Me.OnaddOutboundCallWithPriorityOperationCompleted
            End If
            Me.InvokeAsync("addOutboundCallWithPriority", New Object() {arg0, arg1, arg2, arg3, arg4}, Me.addOutboundCallWithPriorityOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddOutboundCallWithPriorityOperationCompleted(ByVal arg As Object)
            If (Not (Me.addOutboundCallWithPriorityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addOutboundCallWithPriorityCompleted(Me, New addOutboundCallWithPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function changePriorityByForeignKey(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg1 As Integer) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Boolean
            Dim results() As Object = Me.Invoke("changePriorityByForeignKey", New Object() {arg0, arg1})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub changePriorityByForeignKeyAsync(ByVal arg0 As String, ByVal arg1 As Integer)
            Me.changePriorityByForeignKeyAsync(arg0, arg1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub changePriorityByForeignKeyAsync(ByVal arg0 As String, ByVal arg1 As Integer, ByVal userState As Object)
            If (Me.changePriorityByForeignKeyOperationCompleted Is Nothing) Then
                Me.changePriorityByForeignKeyOperationCompleted = AddressOf Me.OnchangePriorityByForeignKeyOperationCompleted
            End If
            Me.InvokeAsync("changePriorityByForeignKey", New Object() {arg0, arg1}, Me.changePriorityByForeignKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnchangePriorityByForeignKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.changePriorityByForeignKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent changePriorityByForeignKeyCompleted(Me, New changePriorityByForeignKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addOutboundCallWithForeignKey(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg1 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg2 As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg3 As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg4 As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg5 As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Long
            Dim results() As Object = Me.Invoke("addOutboundCallWithForeignKey", New Object() {arg0, arg1, arg2, arg3, arg4, arg5})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addOutboundCallWithForeignKeyAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As Integer, ByVal arg4 As Integer, ByVal arg5 As String)
            Me.addOutboundCallWithForeignKeyAsync(arg0, arg1, arg2, arg3, arg4, arg5, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addOutboundCallWithForeignKeyAsync(ByVal arg0 As String, ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As Integer, ByVal arg4 As Integer, ByVal arg5 As String, ByVal userState As Object)
            If (Me.addOutboundCallWithForeignKeyOperationCompleted Is Nothing) Then
                Me.addOutboundCallWithForeignKeyOperationCompleted = AddressOf Me.OnaddOutboundCallWithForeignKeyOperationCompleted
            End If
            Me.InvokeAsync("addOutboundCallWithForeignKey", New Object() {arg0, arg1, arg2, arg3, arg4, arg5}, Me.addOutboundCallWithForeignKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddOutboundCallWithForeignKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.addOutboundCallWithForeignKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addOutboundCallWithForeignKeyCompleted(Me, New addOutboundCallWithForeignKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelOutboundCallByForeignKey(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arg0 As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Boolean
            Dim results() As Object = Me.Invoke("cancelOutboundCallByForeignKey", New Object() {arg0})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelOutboundCallByForeignKeyAsync(ByVal arg0 As String)
            Me.cancelOutboundCallByForeignKeyAsync(arg0, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelOutboundCallByForeignKeyAsync(ByVal arg0 As String, ByVal userState As Object)
            If (Me.cancelOutboundCallByForeignKeyOperationCompleted Is Nothing) Then
                Me.cancelOutboundCallByForeignKeyOperationCompleted = AddressOf Me.OncancelOutboundCallByForeignKeyOperationCompleted
            End If
            Me.InvokeAsync("cancelOutboundCallByForeignKey", New Object() {arg0}, Me.cancelOutboundCallByForeignKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelOutboundCallByForeignKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelOutboundCallByForeignKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelOutboundCallByForeignKeyCompleted(Me, New cancelOutboundCallByForeignKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getOutboundCallList() As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("getOutboundCallList", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getOutboundCallListAsync()
            Me.getOutboundCallListAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getOutboundCallListAsync(ByVal userState As Object)
            If (Me.getOutboundCallListOperationCompleted Is Nothing) Then
                Me.getOutboundCallListOperationCompleted = AddressOf Me.OngetOutboundCallListOperationCompleted
            End If
            Me.InvokeAsync("getOutboundCallList", New Object(-1) {}, Me.getOutboundCallListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetOutboundCallListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getOutboundCallListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getOutboundCallListCompleted(Me, New getOutboundCallListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://server.outdial.smm.sandcherry.com/", ResponseNamespace:="http://server.outdial.smm.sandcherry.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub tester()
            Me.Invoke("tester", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub testerAsync()
            Me.testerAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub testerAsync(ByVal userState As Object)
            If (Me.testerOperationCompleted Is Nothing) Then
                Me.testerOperationCompleted = AddressOf Me.OntesterOperationCompleted
            End If
            Me.InvokeAsync("tester", New Object(-1) {}, Me.testerOperationCompleted, userState)
        End Sub
        
        Private Sub OntesterOperationCompleted(ByVal arg As Object)
            If (Not (Me.testerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent testerCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub addOutboundCallCompletedEventHandler(ByVal sender As Object, ByVal e As addOutboundCallCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addOutboundCallCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub cancelPendingOutboundCallCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getDefaultRetryIntervalMinutesCompletedEventHandler(ByVal sender As Object, ByVal e As getDefaultRetryIntervalMinutesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getDefaultRetryIntervalMinutesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub cancelRetryOutboundCallCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getDefaultBrowserURICompletedEventHandler(ByVal sender As Object, ByVal e As getDefaultBrowserURICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getDefaultBrowserURICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub addOutboundCallWithRetryIntervalCompletedEventHandler(ByVal sender As Object, ByVal e As addOutboundCallWithRetryIntervalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addOutboundCallWithRetryIntervalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub addOutboundCallWithPriorityCompletedEventHandler(ByVal sender As Object, ByVal e As addOutboundCallWithPriorityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addOutboundCallWithPriorityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub changePriorityByForeignKeyCompletedEventHandler(ByVal sender As Object, ByVal e As changePriorityByForeignKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class changePriorityByForeignKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub addOutboundCallWithForeignKeyCompletedEventHandler(ByVal sender As Object, ByVal e As addOutboundCallWithForeignKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addOutboundCallWithForeignKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub cancelOutboundCallByForeignKeyCompletedEventHandler(ByVal sender As Object, ByVal e As cancelOutboundCallByForeignKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelOutboundCallByForeignKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getOutboundCallListCompletedEventHandler(ByVal sender As Object, ByVal e As getOutboundCallListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getOutboundCallListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub testerCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace
